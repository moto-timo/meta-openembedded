From 7a4c4f8bac502ca68ae83de649f416db39682484 Mon Sep 17 00:00:00 2001
From: Marc Abramowitz <abramowi@adobe.com>
Date: Thu, 3 Aug 2017 07:29:38 -0700
Subject: [PATCH] Allow forcing color with --color=always

even if stdout is not a tty (e.g.: Jenkins)
---
 behave/configuration.py    |  7 ++++---
 behave/formatter/pretty.py | 12 +++++++++---
 2 files changed, 13 insertions(+), 6 deletions(-)

diff --git a/behave/configuration.py b/behave/configuration.py
index 04c014a..1b0bc2b 100644
--- a/behave/configuration.py
+++ b/behave/configuration.py
@@ -82,9 +82,10 @@ options = [
           help="Disable the use of ANSI color escapes.")),
 
     (("--color",),
-     dict(action="store_true", dest="color",
-          help="""Use ANSI color escapes. This is the default
-                  behaviour. This switch is used to override a
+     dict(dest="color", choices=["never", "always", "auto"],
+          default="auto", const="auto", nargs="?",
+          help="""Use ANSI color escapes. Defaults to %(const)r.
+                  This switch is used to override a
                   configuration file setting.""")),
 
     (("-d", "--dry-run"),
diff --git a/behave/formatter/pretty.py b/behave/formatter/pretty.py
index 794e1d7..b97438a 100644
--- a/behave/formatter/pretty.py
+++ b/behave/formatter/pretty.py
@@ -66,9 +66,7 @@ class PrettyFormatter(Formatter):
         super(PrettyFormatter, self).__init__(stream_opener, config)
         # -- ENSURE: Output stream is open.
         self.stream = self.open()
-        isatty = getattr(self.stream, "isatty", lambda: True)
-        stream_supports_colors = isatty()
-        self.monochrome = not config.color or not stream_supports_colors
+        self.monochrome = self._get_monochrome(config)
         self.show_source = config.show_source
         self.show_timings = config.show_timings
         self.show_multiline = config.show_multiline
@@ -83,6 +81,14 @@ class PrettyFormatter(Formatter):
         self.indentations = []
         self.step_lines = 0
 
+    def _get_monochrome(self, config):
+        isatty = getattr(self.stream, "isatty", lambda: True)
+        if config.color == 'always':
+            return False
+        elif config.color == 'never':
+            return True
+        else:
+            return not isatty()
 
     def reset(self):
         # -- UNUSED: self.tag_statement = None
