From 7ccbaf132b242ee03409f87eec26f9e870b381f0 Mon Sep 17 00:00:00 2001
From: jenisys <jenisys@users.noreply.github.com>
Date: Sun, 15 Dec 2019 21:20:18 +0100
Subject: [PATCH] CLEANUP: Add ContextMode enum related to #797

Add ContextMode enum to cleanup weirdness related to issue #797.
Pre-existing Context.BEHAVE/USER constants overshadowed user attributes
in Context.attribute retrieval case.
---
 behave/runner.py          | 33 ++++++++++++++++++++++-----------
 tests/unit/test_runner.py | 29 +++++++++++++++--------------
 2 files changed, 37 insertions(+), 25 deletions(-)

diff --git a/behave/runner.py b/behave/runner.py
index cbedb5a..bcf4ab2 100644
--- a/behave/runner.py
+++ b/behave/runner.py
@@ -21,6 +21,7 @@ from behave.runner_util import \
     collect_feature_locations, parse_features, \
     exec_file, load_step_modules, PathManager
 from behave.step_registry import registry as the_step_registry
+from enum import Enum
 
 if six.PY2:
     # -- USE PYTHON3 BACKPORT: With unicode traceback support.
@@ -45,6 +46,16 @@ class ContextMaskWarning(UserWarning):
     pass
 
 
+class ContextMode(Enum):
+    """Used to distinguish between the two usage modes while using the context:
+
+    * BEHAVE: Indicates "behave" (internal) mode
+    * USER: Indicates "user" mode (in steps, hooks, fixtures, ...)
+    """
+    BEHAVE = 1
+    USER = 2
+
+
 class Context(object):
     """Hold contextual information during the running of tests.
 
@@ -147,8 +158,8 @@ class Context(object):
     .. _`configuration file section names`: behave.html#configuration-files
     """
     # pylint: disable=too-many-instance-attributes
-    BEHAVE = "behave"
-    USER = "user"
+    # BEHAVE = "behave"
+    # USER = "user"
     FAIL_ON_CLEANUP_ERRORS = True
 
     def __init__(self, runner):
@@ -166,7 +177,7 @@ class Context(object):
         self._stack = [d]
         self._record = {}
         self._origin = {}
-        self._mode = self.BEHAVE
+        self._mode = ContextMode.BEHAVE
 
         # -- MODEL ENTITY REFERENCES/SUPPORT:
         self.feature = None
@@ -260,11 +271,11 @@ class Context(object):
 
     def _use_with_behave_mode(self):
         """Provides a context manager for using the context in BEHAVE mode."""
-        return use_context_with_mode(self, Context.BEHAVE)
+        return use_context_with_mode(self, ContextMode.BEHAVE)
 
     def use_with_user_mode(self):
         """Provides a context manager for using the context in USER mode."""
-        return use_context_with_mode(self, Context.USER)
+        return use_context_with_mode(self, ContextMode.USER)
 
     def user_mode(self):
         warnings.warn("Use 'use_with_user_mode()' instead",
@@ -291,11 +302,11 @@ class Context(object):
 
     def _emit_warning(self, attr, params):
         msg = ""
-        if self._mode is self.BEHAVE and self._origin[attr] is not self.BEHAVE:
+        if self._mode is ContextMode.BEHAVE and self._origin[attr] is not ContextMode.BEHAVE:
             msg = "behave runner is masking context attribute '%(attr)s' " \
                   "originally set in %(function)s (%(filename)s:%(line)s)"
-        elif self._mode is self.USER:
-            if self._origin[attr] is not self.USER:
+        elif self._mode is ContextMode.USER:
+            if self._origin[attr] is not ContextMode.USER:
                 msg = "user code is masking context attribute '%(attr)s' " \
                       "originally set by behave"
             elif self._config.verbose:
@@ -442,13 +453,13 @@ class Context(object):
 
 @contextlib.contextmanager
 def use_context_with_mode(context, mode):
-    """Switch context to BEHAVE or USER mode.
+    """Switch context to ContextMode.BEHAVE or ContextMode.USER mode.
     Provides a context manager for switching between the two context modes.
 
     .. sourcecode:: python
 
         context = Context()
-        with use_context_with_mode(context, Context.BEHAVE):
+        with use_context_with_mode(context, ContextMode.BEHAVE):
             ...     # Do something
         # -- POSTCONDITION: Original context._mode is restored.
 
@@ -456,7 +467,7 @@ def use_context_with_mode(context, mode):
     :param mode:     Mode to apply to context object.
     """
     # pylint: disable=protected-access
-    assert mode in (Context.BEHAVE, Context.USER)
+    assert mode in (ContextMode.BEHAVE, ContextMode.USER)
     current_mode = context._mode
     try:
         context._mode = mode
diff --git a/tests/unit/test_runner.py b/tests/unit/test_runner.py
index f0d03cd..beaff8f 100644
--- a/tests/unit/test_runner.py
+++ b/tests/unit/test_runner.py
@@ -17,6 +17,7 @@ from behave import runner_util
 from behave.model import Table
 from behave.step_registry import StepRegistry
 from behave import parser, runner
+from behave.runner import ContextMode
 from behave.exception import ConfigError
 from behave.formatter.base import StreamOpener
 
@@ -36,29 +37,29 @@ class TestContext(unittest.TestCase):
 
     def test_user_mode_shall_restore_behave_mode(self):
         # -- CASE: No exception is raised.
-        initial_mode = runner.Context.BEHAVE
+        initial_mode = ContextMode.BEHAVE
         assert self.context._mode == initial_mode
         with self.context.use_with_user_mode():
-            assert self.context._mode == runner.Context.USER
+            assert self.context._mode == ContextMode.USER
             self.context.thing = "stuff"
         assert self.context._mode == initial_mode
 
     def test_user_mode_shall_restore_behave_mode_if_assert_fails(self):
-        initial_mode = runner.Context.BEHAVE
+        initial_mode = ContextMode.BEHAVE
         assert self.context._mode == initial_mode
         try:
             with self.context.use_with_user_mode():
-                assert self.context._mode == runner.Context.USER
+                assert self.context._mode == ContextMode.USER
                 assert False, "XFAIL"
         except AssertionError:
             assert self.context._mode == initial_mode
 
     def test_user_mode_shall_restore_behave_mode_if_exception_is_raised(self):
-        initial_mode = runner.Context.BEHAVE
+        initial_mode = ContextMode.BEHAVE
         assert self.context._mode == initial_mode
         try:
             with self.context.use_with_user_mode():
-                assert self.context._mode == runner.Context.USER
+                assert self.context._mode == ContextMode.USER
                 raise RuntimeError("XFAIL")
         except RuntimeError:
             assert self.context._mode == initial_mode
@@ -66,21 +67,21 @@ class TestContext(unittest.TestCase):
     def test_use_with_user_mode__shall_restore_initial_mode(self):
         # -- CASE: No exception is raised.
         # pylint: disable=protected-access
-        initial_mode = runner.Context.BEHAVE
+        initial_mode = ContextMode.BEHAVE
         self.context._mode = initial_mode
         with self.context.use_with_user_mode():
-            assert self.context._mode == runner.Context.USER
+            assert self.context._mode == ContextMode.USER
             self.context.thing = "stuff"
         assert self.context._mode == initial_mode
 
     def test_use_with_user_mode__shall_restore_initial_mode_with_error(self):
         # -- CASE: Exception is raised.
         # pylint: disable=protected-access
-        initial_mode = runner.Context.BEHAVE
+        initial_mode = ContextMode.BEHAVE
         self.context._mode = initial_mode
         try:
             with self.context.use_with_user_mode():
-                assert self.context._mode == runner.Context.USER
+                assert self.context._mode == ContextMode.USER
                 raise RuntimeError("XFAIL")
         except RuntimeError:
             assert self.context._mode == initial_mode
@@ -88,21 +89,21 @@ class TestContext(unittest.TestCase):
     def test_use_with_behave_mode__shall_restore_initial_mode(self):
         # -- CASE: No exception is raised.
         # pylint: disable=protected-access
-        initial_mode = runner.Context.USER
+        initial_mode = ContextMode.USER
         self.context._mode = initial_mode
         with self.context._use_with_behave_mode():
-            assert self.context._mode == runner.Context.BEHAVE
+            assert self.context._mode == ContextMode.BEHAVE
             self.context.thing = "stuff"
         assert self.context._mode == initial_mode
 
     def test_use_with_behave_mode__shall_restore_initial_mode_with_error(self):
         # -- CASE: Exception is raised.
         # pylint: disable=protected-access
-        initial_mode = runner.Context.USER
+        initial_mode = ContextMode.USER
         self.context._mode = initial_mode
         try:
             with self.context._use_with_behave_mode():
-                assert self.context._mode == runner.Context.BEHAVE
+                assert self.context._mode == ContextMode.BEHAVE
                 raise RuntimeError("XFAIL")
         except RuntimeError:
             assert self.context._mode == initial_mode
