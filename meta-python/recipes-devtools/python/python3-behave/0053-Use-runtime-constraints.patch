From 3592706c7d54c9a0bb52682bdee1a6465b17883a Mon Sep 17 00:00:00 2001
From: jenisys <jenisys@users.noreply.github.com>
Date: Sat, 13 Jul 2019 13:19:13 +0200
Subject: [PATCH] Use runtime constraints

---
 .../features/async_dispatch.feature           |  2 ++
 .../async_step/features/async_run.feature     |  2 ++
 examples/async_step/features/environment.py   | 13 +++++++++
 .../{async_steps34.py => _async_steps34.py}   |  6 +++-
 .../{async_steps35.py => _async_steps35.py}   |  3 +-
 .../features/steps/async_dispatch_steps.py    | 29 +++++++++++++++----
 .../async_step/features/steps/async_steps.py  | 12 ++++++++
 7 files changed, 59 insertions(+), 8 deletions(-)
 rename examples/async_step/features/steps/{async_steps34.py => _async_steps34.py} (58%)
 rename examples/async_step/features/steps/{async_steps35.py => _async_steps35.py} (95%)
 create mode 100644 examples/async_step/features/steps/async_steps.py

diff --git a/examples/async_step/features/async_dispatch.feature b/examples/async_step/features/async_dispatch.feature
index 416d3d1..18e9869 100644
--- a/examples/async_step/features/async_dispatch.feature
+++ b/examples/async_step/features/async_dispatch.feature
@@ -1,6 +1,8 @@
 @use.with_python.version=3.4
 @use.with_python.version=3.5
 @use.with_python.version=3.6
+@use.with_python.version=3.7
+@use.with_python.version=3.8
 Feature:
   Scenario:
     Given I dispatch an async-call with param "Alice"
diff --git a/examples/async_step/features/async_run.feature b/examples/async_step/features/async_run.feature
index 9f506b4..29b8fa7 100644
--- a/examples/async_step/features/async_run.feature
+++ b/examples/async_step/features/async_run.feature
@@ -1,6 +1,8 @@
 @use.with_python.version=3.4
 @use.with_python.version=3.5
 @use.with_python.version=3.6
+@use.with_python.version=3.7
+@use.with_python.version=3.8
 Feature:
   Scenario:
     Given an async-step waits 0.3 seconds
diff --git a/examples/async_step/features/environment.py b/examples/async_step/features/environment.py
index 9d4302b..02c4d92 100644
--- a/examples/async_step/features/environment.py
+++ b/examples/async_step/features/environment.py
@@ -1,8 +1,18 @@
 # -*- coding: UTF-8 -*-
 
 from behave.tag_matcher import ActiveTagMatcher, setup_active_tag_values
+from behave.api.runtime_constraint import require_min_python_version
 import sys
 
+# -----------------------------------------------------------------------------
+# REQUIRE: python >= 3.4
+# -----------------------------------------------------------------------------
+require_min_python_version("3.4")
+
+
+# -----------------------------------------------------------------------------
+# SUPPORT: Active-tags
+# -----------------------------------------------------------------------------
 # -- MATCHES ANY TAGS: @use.with_{category}={value}
 # NOTE: active_tag_value_provider provides category values for active tags.
 python_version = "%s.%s" % sys.version_info[:2]
@@ -11,6 +21,7 @@ active_tag_value_provider = {
 }
 active_tag_matcher = ActiveTagMatcher(active_tag_value_provider)
 
+
 # -----------------------------------------------------------------------------
 # HOOKS:
 # -----------------------------------------------------------------------------
@@ -18,10 +29,12 @@ def before_all(context):
     # -- SETUP ACTIVE-TAG MATCHER (with userdata):
     setup_active_tag_values(active_tag_value_provider, context.config.userdata)
 
+
 def before_feature(context, feature):
     if active_tag_matcher.should_exclude_with(feature.tags):
         feature.skip(reason=active_tag_matcher.exclude_reason)
 
+
 def before_scenario(context, scenario):
     if active_tag_matcher.should_exclude_with(scenario.effective_tags):
         scenario.skip(reason=active_tag_matcher.exclude_reason)
diff --git a/examples/async_step/features/steps/async_steps34.py b/examples/async_step/features/steps/_async_steps34.py
similarity index 58%
rename from examples/async_step/features/steps/async_steps34.py
rename to examples/async_step/features/steps/_async_steps34.py
index c4962ab..556500f 100644
--- a/examples/async_step/features/steps/async_steps34.py
+++ b/examples/async_step/features/steps/_async_steps34.py
@@ -1,8 +1,12 @@
-# -- REQUIRES: Python >= 3.4
+# -- REQUIRES: Python >= 3.4 and Python < 3.8
+# HINT: Decorator @asyncio.coroutine is prohibited in python 3.8
+# USE:  Async generator/coroutine instead.
+
 from behave import step
 from behave.api.async_step import async_run_until_complete
 import asyncio
 
+# -- USABLE FOR: "3.4" <= python_version < "3.8"
 @step('an async-step waits {duration:f} seconds')
 @async_run_until_complete
 @asyncio.coroutine
diff --git a/examples/async_step/features/steps/async_steps35.py b/examples/async_step/features/steps/_async_steps35.py
similarity index 95%
rename from examples/async_step/features/steps/async_steps35.py
rename to examples/async_step/features/steps/_async_steps35.py
index 018d5ef..edcbe0e 100644
--- a/examples/async_step/features/steps/async_steps35.py
+++ b/examples/async_step/features/steps/_async_steps35.py
@@ -1,4 +1,5 @@
 # -- REQUIRES: Python >= 3.5
+
 from behave import step
 from behave.api.async_step import async_run_until_complete
 import asyncio
@@ -6,5 +7,5 @@ import asyncio
 @step('an async-step waits {duration:f} seconds')
 @async_run_until_complete
 async def step_async_step_waits_seconds_py35(context, duration):
-    """Simple example of a coroutine as async-step (in Python 3.5)"""
+    """Simple example of a coroutine as async-step (in Python 3.5 or newer)"""
     await asyncio.sleep(duration)
diff --git a/examples/async_step/features/steps/async_dispatch_steps.py b/examples/async_step/features/steps/async_dispatch_steps.py
index b9b6e15..222e54d 100644
--- a/examples/async_step/features/steps/async_dispatch_steps.py
+++ b/examples/async_step/features/steps/async_dispatch_steps.py
@@ -1,21 +1,38 @@
 # -*- coding: UTF-8 -*-
-# REQUIRES: Python >= 3.5
+# REQUIRES: Python >= 3.4/3.5
+import sys
 from behave import given, then, step
-from behave.api.async_step import use_or_create_async_context, AsyncContext
+from behave.api.async_step import use_or_create_async_context
 from hamcrest import assert_that, equal_to, empty
 import asyncio
 
-@asyncio.coroutine
-def async_func(param):
-    yield from asyncio.sleep(0.2)
-    return str(param).upper()
 
+# ---------------------------------------------------------------------------
+# ASYNC EXAMPLE FUNCTION:
+# ---------------------------------------------------------------------------
+python_version = "%s.%s" % sys.version_info[:2]
+if python_version >= "3.5":
+    async def async_func(param):
+        await asyncio.sleep(0.2)
+        return str(param).upper()
+else:
+    # -- HINT: Decorator @asyncio.coroutine is prohibited in python 3.8
+    @asyncio.coroutine
+    def async_func(param):
+        yield from asyncio.sleep(0.2)
+        return str(param).upper()
+
+
+# ---------------------------------------------------------------------------
+# STEPS:
+# ---------------------------------------------------------------------------
 @given('I dispatch an async-call with param "{param}"')
 def step_dispatch_async_call(context, param):
     async_context = use_or_create_async_context(context, "async_context1")
     task = async_context.loop.create_task(async_func(param))
     async_context.tasks.append(task)
 
+
 @then('the collected result of the async-calls is "{expected}"')
 def step_collected_async_call_result_is(context, expected):
     async_context = context.async_context1
diff --git a/examples/async_step/features/steps/async_steps.py b/examples/async_step/features/steps/async_steps.py
new file mode 100644
index 0000000..dc03c72
--- /dev/null
+++ b/examples/async_step/features/steps/async_steps.py
@@ -0,0 +1,12 @@
+# -*- coding: UTF-8 -*-
+# REQUIRES: Python >= 3.4/3.5
+"""Python import-barrier for python2 or python < 3.4."""
+
+from __future__ import absolute_import
+import sys
+
+python_version = "%s.%s" % sys.version_info[:2]
+if python_version >= "3.5":
+    import _async_steps35
+elif python_version == "3.4":
+    import _async_steps34
