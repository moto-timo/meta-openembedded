From ea058e6cefff1f697b3c43ec3eccb5463dc16735 Mon Sep 17 00:00:00 2001
From: jenisys <jenisys@users.noreply.github.com>
Date: Sat, 9 Jan 2021 21:52:42 +0100
Subject: [PATCH] FIX: Deprecated warnings for Python 3.x

---
 bin/json.format.py         | 15 ++++++++++-----
 bin/jsonschema_validate.py | 23 ++++++++++++++++-------
 2 files changed, 26 insertions(+), 12 deletions(-)

diff --git a/bin/json.format.py b/bin/json.format.py
index b7eb05f..b75d88a 100755
--- a/bin/json.format.py
+++ b/bin/json.format.py
@@ -10,8 +10,8 @@ LICENSE:  BSD
 from __future__ import absolute_import
 
 __author__    = "Jens Engel"
-__copyright__ = "(c) 2011-2013 by Jens Engel"
-VERSION = "0.2.2"
+__copyright__ = "(c) 2011-2021 by Jens Engel"
+VERSION = "0.3.0"
 
 # -- IMPORTS:
 import os.path
@@ -29,6 +29,7 @@ except ImportError:
 # CONSTANTS:
 # ----------------------------------------------------------------------------
 DEFAULT_INDENT_SIZE = 2
+PYTHON_VERSION = sys.version_info[:2]
 
 # ----------------------------------------------------------------------------
 # FUNCTIONS:
@@ -58,7 +59,11 @@ def json_format(filename, indent=DEFAULT_INDENT_SIZE, **kwargs):
 #        return 0
 
     contents = open(filename, "r").read()
-    data      = json.loads(contents, encoding=encoding)
+    if PYTHON_VERSION >= (3, 1):
+        # -- NOTE: encoding keyword is deprecated since python 3.1
+        data = json.loads(contents)
+    else:
+        data = json.loads(contents, encoding=encoding)
     contents2 = json.dumps(data, indent=indent, sort_keys=sort_keys)
     contents2 = contents2.strip()
     contents2 = "%s\n" % contents2
@@ -69,7 +74,7 @@ def json_format(filename, indent=DEFAULT_INDENT_SIZE, **kwargs):
         outfile = open(filename, "w")
         outfile.write(contents2)
         outfile.close()
-        console.warn("%s OK", message)
+        console.warning("%s OK", message)
         return 1 #< OK
 
 def json_formatall(filenames, indent=DEFAULT_INDENT_SIZE, dry_run=False):
@@ -143,7 +148,7 @@ Format/Beautify one or more JSON file(s)."""
                 console.info("SKIP %s, no JSON files found in dir.", filename)
                 skipped += 1
         elif not os.path.exists(filename):
-            console.warn("SKIP %s, file not found.", filename)
+            console.warning("SKIP %s, file not found.", filename)
             skipped += 1
             continue
         else:
diff --git a/bin/jsonschema_validate.py b/bin/jsonschema_validate.py
index db2edb1..fe7596e 100755
--- a/bin/jsonschema_validate.py
+++ b/bin/jsonschema_validate.py
@@ -18,11 +18,11 @@ from __future__ import absolute_import, print_function
 __author__  = "Jens Engel"
 __version__ = "0.1.0"
 
-from jsonschema import validate
 import argparse
 import os.path
 import sys
 import textwrap
+from jsonschema import validate
 try:
     import json
 except ImportError:
@@ -38,16 +38,28 @@ except ImportError:
 HERE = os.path.dirname(__file__)
 TOP  = os.path.normpath(os.path.join(HERE, ".."))
 SCHEMA = os.path.join(TOP, "etc", "json", "behave.json-schema")
+PYTHON_VERSION = sys.version_info[:2]
 
 
 # -----------------------------------------------------------------------------
 # FUNCTIONS:
 # -----------------------------------------------------------------------------
-def jsonschema_validate(filename, schema, encoding=None):
+def json_loads(text, encoding=None):
+    kwargs = {}
+    if encoding and PYTHON_VERSION < (3, 1):
+        # -- NOTE: encoding keyword is deprecated since python 3.1
+        kwargs["encoding"] = encoding
+    return json.loads(text, **kwargs)
+
+def json_load(filename, encoding=None):
     f = open(filename, "r")
     contents = f.read()
     f.close()
-    data = json.loads(contents, encoding=encoding)
+    data = json_loads(contents, encoding=encoding)
+    return data
+
+def jsonschema_validate(filename, schema, encoding=None):
+    data = json_load(filename, encoding=encoding)
     return validate(data, schema)
 
 
@@ -89,10 +101,7 @@ def main(args=None):
         parser.error("SCHEMA not found: %s" % options.schema)
 
     try:
-        f = open(options.schema, "r")
-        contents = f.read()
-        f.close()
-        schema = json.loads(contents, encoding=options.encoding)
+        schema = json_load(options.schema, encoding=options.encoding)
     except Exception as e:
         msg = "ERROR: %s: %s (while loading schema)" % (e.__class__.__name__, e)
         sys.exit(msg)
