From 53f525ae1c368afdb26471c2db403d93e14ccc49 Mon Sep 17 00:00:00 2001
From: kingbuzzman <buzzi.javier@gmail.com>
Date: Fri, 19 Jun 2020 09:18:51 -0400
Subject: [PATCH] Adds the ability to use a custom runner in the behave command

---
 behave/__main__.py               |  2 +-
 behave/configuration.py          | 16 ++++++++++++++++
 docs/behave.rst                  |  5 +++++
 tests/unit/test_configuration.py | 19 +++++++++++++++++++
 4 files changed, 41 insertions(+), 1 deletion(-)

diff --git a/behave/__main__.py b/behave/__main__.py
index 3cae36d..edb99c4 100644
--- a/behave/__main__.py
+++ b/behave/__main__.py
@@ -215,7 +215,7 @@ def main(args=None):
     :return: 0, if successful. Non-zero, in case of errors/failures.
     """
     config = Configuration(args)
-    return run_behave(config)
+    return run_behave(config, runner_class=config.runner_class)
 
 
 if __name__ == "__main__":
diff --git a/behave/configuration.py b/behave/configuration.py
index 65e2e3e..04c014a 100644
--- a/behave/configuration.py
+++ b/behave/configuration.py
@@ -8,6 +8,7 @@ import re
 import sys
 import shlex
 import six
+from importlib import import_module
 from six.moves import configparser
 
 from behave.model import ScenarioOutline
@@ -65,6 +66,16 @@ class LogLevel(object):
 # -----------------------------------------------------------------------------
 # CONFIGURATION SCHEMA:
 # -----------------------------------------------------------------------------
+
+def valid_python_module(path):
+    try:
+        module_path, class_name = path.rsplit('.', 1)
+        module = import_module(module_path)
+        return getattr(module, class_name)
+    except (ValueError, AttributeError, ImportError):
+        raise argparse.ArgumentTypeError("No module named '%s' was found." % path)
+
+
 options = [
     (("-c", "--no-color"),
      dict(action="store_false", dest="color",
@@ -111,6 +122,11 @@ options = [
      dict(metavar="PATH", dest="junit_directory",
           default="reports",
           help="""Directory in which to store JUnit reports.""")),
+    
+    (("--runner-class",),
+     dict(action="store",
+          default="behave.runner.Runner", type=valid_python_module,
+          help="Tells Behave to use a specific runner. (default: %(default)s)")),
 
     ((),  # -- CONFIGFILE only
      dict(dest="default_format",
diff --git a/docs/behave.rst b/docs/behave.rst
index 25ce523..8c1c125 100644
--- a/docs/behave.rst
+++ b/docs/behave.rst
@@ -55,6 +55,11 @@ You may see the same information presented below at any time using ``behave
 
     Directory in which to store JUnit reports.
 
+.. option:: --runner-class
+
+    This allows you to use your own custom runner. The default is 
+    ``behave.runner.Runner``.
+
 .. option:: -f, --format
 
     Specify a formatter. If none is specified the default formatter is
diff --git a/tests/unit/test_configuration.py b/tests/unit/test_configuration.py
index c96cf63..025a6d0 100644
--- a/tests/unit/test_configuration.py
+++ b/tests/unit/test_configuration.py
@@ -5,6 +5,7 @@ import six
 import pytest
 from behave import configuration
 from behave.configuration import Configuration, UserData
+from behave.runner import Runner as BaseRunner
 from unittest import TestCase
 
 
@@ -37,6 +38,10 @@ if sys.platform.startswith("win"):
     ROOTDIR_PREFIX = os.environ.get("BEHAVE_ROOTDIR_PREFIX", ROOTDIR_PREFIX_DEFAULT)
 
 
+class CustomTestRunner(BaseRunner):
+    """Custom, dummy runner"""
+
+
 class TestConfiguration(object):
 
     def test_read_file(self):
@@ -92,6 +97,20 @@ class TestConfiguration(object):
         assert "STAGE2_environment.py" == config.environment_file
         del os.environ["BEHAVE_STAGE"]
 
+    def test_settings_runner_class(self, capsys):
+        config = Configuration("")
+        assert BaseRunner == config.runner_class
+
+    def test_settings_runner_class_custom(self, capsys):
+        config = Configuration(["--runner-class=tests.unit.test_configuration.CustomTestRunner"])
+        assert CustomTestRunner == config.runner_class
+
+    def test_settings_runner_class_invalid(self, capsys):
+        with pytest.raises(SystemExit):
+            Configuration(["--runner-class=does.not.exist.Runner"])
+        captured = capsys.readouterr()
+        assert "No module named 'does.not.exist.Runner' was found." in captured.err
+
 
 class TestConfigurationUserData(TestCase):
     """Test userdata aspects in behave.configuration.Configuration class."""
