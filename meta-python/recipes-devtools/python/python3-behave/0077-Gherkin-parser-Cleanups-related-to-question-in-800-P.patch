From 009cb7c638abd3a29de5bc2b62a2a2a05709df08 Mon Sep 17 00:00:00 2001
From: jenisys <jenisys@users.noreply.github.com>
Date: Fri, 20 Dec 2019 16:45:46 +0100
Subject: [PATCH] Gherkin parser: Cleanups related to question in #800
 (ParseError usage)

---
 CHANGES.rst                                  |  1 +
 behave/parser.py                             | 41 +++++++++++++-------
 features/background.feature                  |  4 +-
 features/parser.background.sad_cases.feature | 10 ++---
 features/parser.feature.sad_cases.feature    |  6 +--
 issue.features/issue0148.feature             |  2 +-
 6 files changed, 38 insertions(+), 26 deletions(-)

diff --git a/CHANGES.rst b/CHANGES.rst
index ba4daad..5653492 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -44,6 +44,7 @@ FIXED:
 
 MINOR:
 
+* issue #800: Cleanups related to Gherkin parser/ParseError question (submitted by: otstanteplz)
 * pull  #767: FIX: use_fixture_by_tag didn't return the actual fixture in all cases (provided by: jgentil)
 * pull  #751: gherkin: Adding Rule keyword translation in portuguese and spanish to gherkin-languages.json (provided by: dunossauro)
 * pull  #660: Fix minor typos (provided by: rrueth)
diff --git a/behave/parser.py b/behave/parser.py
index 520f678..58c68be 100644
--- a/behave/parser.py
+++ b/behave/parser.py
@@ -132,13 +132,24 @@ def parse_tags(text):
 
 
 class ParserError(Exception):
-    def __init__(self, message, line, filename=None, line_text=None):
-        if line:
-            message += u" at line %d" % line
-            if line_text:
-                message += u': "%s"' % line_text.strip()
+    @staticmethod
+    def make_annotated(message, line_number, line_text=None, reason=None):
+        """Make annotated message enriched w/ line_number, line_text."""
+        if line_number:
+            message += u" at line %d" % line_number
+        if line_text:
+            message += u': "%s"' % line_text.strip()
+        if reason:
+            message += u"\nREASON: %s" % reason
+        return message
+
+    def __init__(self, message, line, filename=None, line_text=None,
+                 reason=None, use_annotated_message=True):
+        if use_annotated_message:
+            message = self.make_annotated(message, line, line_text, reason)
+
         super(ParserError, self).__init__(message)
-        self.line = line
+        self.line = line    # Line number of parse failure.
         self.line_text = line_text
         self.filename = filename
 
@@ -386,14 +397,13 @@ class Parser(object):
             line = line.strip()
             msg = u"Parser in unknown state %s;" % self.state
             raise ParserError(msg, self.line, self.filename, line)
+
         if not func(line):
             line = line.strip()
-            msg = u'\nParser failure in state %s, at line %d: "%s"\n' % \
-                  (self.state, self.line, line)
+            msg = u'\nParser failure in state=%s' % self.state
             reason = self.ask_parse_failure_oracle(line)
-            if reason:
-                msg += u"REASON: %s" % reason
-            raise ParserError(msg, None, self.filename)
+            raise ParserError(msg, self.line, self.filename,
+                              line_text=line, reason=reason)
 
     def action_init(self, line):
         line = line.strip()
@@ -642,7 +652,7 @@ class Parser(object):
             self.table = model.Table(cells, self.line)
         else:
             if len(cells) != len(self.table.headings):
-                raise ParserError(u"Malformed table", self.line)
+                raise ParserError(u"Malformed table", self.line, self.filename)
                 # MAYBE: self.filename)
             self.table.add_row(cells, self.line)
         return True
@@ -704,8 +714,8 @@ class Parser(object):
                 break   # -- COMMENT: Skip rest of line.
             else:
                 # -- BAD-TAG: Abort here.
-                raise ParserError(u"tag: %s (line: %s)" % (word, line),
-                                  self.line, self.filename)
+                message = u"tag: %s (line: %s)" % (word, line)
+                raise ParserError(message, self.line, self.filename)
         return tags
 
     def parse_step(self, line):
@@ -723,7 +733,8 @@ class Parser(object):
                 step_text_after_keyword = line[len(kw):].strip()
                 if step_type in ("and", "but"):
                     if not self.last_step:
-                        raise ParserError(u"No previous step", self.line)
+                        raise ParserError(u"No previous step",
+                                          self.line, self.filename)
                     step_type = self.last_step
                 else:
                     self.last_step = step_type
diff --git a/features/background.feature b/features/background.feature
index b2f5833..65c4882 100644
--- a/features/background.feature
+++ b/features/background.feature
@@ -362,7 +362,7 @@ Feature: Background
     When I run "behave -f plain -T features/background_sad_example1.feature"
     Then it should fail with:
         """
-        Parser failure in state steps, at line 5: "Background: B1"
+        Parser failure in state=steps at line 5: "Background: B1"
         REASON: Background may not occur after Scenario/ScenarioOutline.
         """
 
@@ -387,6 +387,6 @@ Feature: Background
     When I run "behave -f plain -T features/background_sad_example2.feature"
     Then it should fail with:
         """
-        Parser failure in state steps, at line 5: "Background: B2 (XFAIL)"
+        Parser failure in state=steps at line 5: "Background: B2 (XFAIL)"
         REASON: Background should not be used here.
         """
diff --git a/features/parser.background.sad_cases.feature b/features/parser.background.sad_cases.feature
index 37956ad..eb234ae 100644
--- a/features/parser.background.sad_cases.feature
+++ b/features/parser.background.sad_cases.feature
@@ -37,7 +37,7 @@ Feature: Ensure that BAD/SAD Use cases of Background are detected
       Then it should fail with
         """
         Failed to parse "{__WORKDIR__}/features/syndrome.background_with_tags.feature":
-        Parser failure in state taggable_statement, at line 4: "Background: Oops..."
+        Parser failure in state=taggable_statement at line 4: "Background: Oops..."
         REASON: Background does not support tags.
         """
 
@@ -57,7 +57,7 @@ Feature: Ensure that BAD/SAD Use cases of Background are detected
       Then it should fail with
         """
         Failed to parse "{__WORKDIR__}/features/syndrome.background_after_scenario.feature":
-        Parser failure in state steps, at line 6: "Background: Oops, too late (after Scenario)"
+        Parser failure in state=steps at line 6: "Background: Oops, too late (after Scenario)"
         REASON: Background may not occur after Scenario/ScenarioOutline.
         """
 
@@ -77,7 +77,7 @@ Feature: Ensure that BAD/SAD Use cases of Background are detected
       When I run "behave -f plain -T features/syndrome.tagged_background_after_scenario.feature"
       Then it should fail with
         """
-        Parser failure in state taggable_statement, at line 7: "Background: Oops, too late (after Scenario)"
+        Parser failure in state=taggable_statement at line 7: "Background: Oops, too late (after Scenario)"
         REASON: Background may not occur after Scenario/ScenarioOutline.
         """
 
@@ -100,7 +100,7 @@ Feature: Ensure that BAD/SAD Use cases of Background are detected
       When I run "behave -f plain -T features/syndrome.background_after_scenario_outline.feature"
       Then it should fail with
         """
-        Parser failure in state steps, at line 10: "Background: Oops, too late (after Scenario Outline)"
+        Parser failure in state=steps at line 10: "Background: Oops, too late (after Scenario Outline)"
         REASON: Background may not occur after Scenario/ScenarioOutline.
         """
 
@@ -124,6 +124,6 @@ Feature: Ensure that BAD/SAD Use cases of Background are detected
       When I run "behave -f plain -T features/syndrome.background_after_scenario_outline.feature"
       Then it should fail with
         """
-        Parser failure in state taggable_statement, at line 11: "Background: Oops, too late (after Scenario Outline)"
+        Parser failure in state=taggable_statement at line 11: "Background: Oops, too late (after Scenario Outline)"
         REASON: Background may not occur after Scenario/ScenarioOutline.
         """
diff --git a/features/parser.feature.sad_cases.feature b/features/parser.feature.sad_cases.feature
index d89d9b7..0e12d9f 100644
--- a/features/parser.feature.sad_cases.feature
+++ b/features/parser.feature.sad_cases.feature
@@ -84,7 +84,7 @@ Feature: Parsing a Feature File without a Feature or with several Features
       Then it should fail with:
         """
         Failed to parse "{__WORKDIR__}/features/only_text.feature":
-        Parser failure in state init, at line 1: "This File: Contains only text without keywords."
+        Parser failure in state=init at line 1: "This File: Contains only text without keywords."
         REASON: No feature found.
         """
 
@@ -103,7 +103,7 @@ Feature: Parsing a Feature File without a Feature or with several Features
       Then it should fail with:
         """
         Failed to parse "{__WORKDIR__}/features/naked_scenario_only.feature":
-        Parser failure in state init, at line 1: "Scenario:"
+        Parser failure in state=init at line 1: "Scenario:"
         REASON: Scenario may not occur before Feature.
         """
 
@@ -139,6 +139,6 @@ Feature: Parsing a Feature File without a Feature or with several Features
           Then it should fail with:
             """
             Failed to parse "{__WORKDIR__}/features/two_features.feature":
-            Parser failure in state steps, at line 7: "Feature: F2"
+            Parser failure in state=steps at line 7: "Feature: F2"
             REASON: Multiple features in one file are not supported.
             """
diff --git a/issue.features/issue0148.feature b/issue.features/issue0148.feature
index 4387795..667d196 100644
--- a/issue.features/issue0148.feature
+++ b/issue.features/issue0148.feature
@@ -67,7 +67,7 @@ Feature: Issue #148: Substeps do not fail
     And the command output should contain:
         """
         ParserError: Failed to parse <string>:
-        Parser failure in state steps, at line 2: "I do something stupid"
+        Parser failure in state=steps at line 2: "I do something stupid"
         """
 
 
