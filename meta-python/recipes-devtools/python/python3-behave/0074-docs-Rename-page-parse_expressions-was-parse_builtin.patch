From 5fc666e4d86e33e5356a03ca92003457f42a6b2a Mon Sep 17 00:00:00 2001
From: jenisys <jenisys@users.noreply.github.com>
Date: Sun, 15 Dec 2019 21:52:53 +0100
Subject: [PATCH] docs: Rename page 'parse_expressions' (was:
 parse_builtin_types) and update table to current parse-1.12.1

---
 docs/appendix.rst            |  2 +-
 docs/parse_builtin_types.rst | 59 ------------------------
 docs/parse_expressions.rst   | 87 ++++++++++++++++++++++++++++++++++++
 3 files changed, 88 insertions(+), 60 deletions(-)
 delete mode 100644 docs/parse_builtin_types.rst
 create mode 100644 docs/parse_expressions.rst

diff --git a/docs/appendix.rst b/docs/appendix.rst
index 8c0cb05..79b5455 100644
--- a/docs/appendix.rst
+++ b/docs/appendix.rst
@@ -11,7 +11,7 @@ Appendix
 
     formatters
     context_attributes
-    parse_builtin_types
+    parse_expressions
     regular_expressions
     test_domains
     behave_ecosystem
diff --git a/docs/parse_builtin_types.rst b/docs/parse_builtin_types.rst
deleted file mode 100644
index 32e18ec..0000000
--- a/docs/parse_builtin_types.rst
+++ /dev/null
@@ -1,59 +0,0 @@
-.. _id.appendix.parse_builtin_types:
-
-Predefined Data Types in ``parse``
-==============================================================================
-
-:pypi:`behave` uses the :pypi:`parse` module (inverse of Python `string.format`_)
-under the hoods to parse parameters in step definitions.
-This leads to rather simple and readable parse expressions for step parameters.
-
-.. code-block:: python
-
-    # -- FILE: features/steps/type_transform_example_steps.py
-    from behave import given
-
-    @given('I have {number:d} friends')  #< Convert 'number' into int type.
-    def step_given_i_have_number_friends(context, number):
-        assert number > 0
-        ...
-
-Therefore, the following ``parse types`` are already supported
-in step definitions without registration of any *user-defined type*:
-
-
-===== =========================================== ============
-Type  Characters Matched                          Output Type
-===== =========================================== ============
- w    Letters and underscore                      str
- W    Non-letter and underscore                   str
- s    Whitespace                                  str
- S    Non-whitespace                              str
- d    Digits (effectively integer numbers)        int
- D    Non-digit                                   str
- n    Numbers with thousands separators (, or .)  int
- %    Percentage (converted to value/100.0)       float
- f    Fixed-point numbers                         float
- e    Floating-point numbers with exponent        float
-      e.g. 1.1e-10, NAN (all case insensitive)
- g    General number format (either d, f or e)    float
- b    Binary numbers                              int
- o    Octal numbers                               int
- x    Hexadecimal numbers (lower and upper case)  int
- ti   ISO 8601 format date/time                   datetime
-      e.g. 1972-01-20T10:21:36Z
- te   RFC2822 e-mail format date/time             datetime
-      e.g. Mon, 20 Jan 1972 10:21:36 +1000
- tg   Global (day/month) format date/time         datetime
-      e.g. 20/1/1972 10:21:36 AM +1:00
- ta   US (month/day) format date/time             datetime
-      e.g. 1/20/1972 10:21:36 PM +10:30
- tc   ctime() format date/time                    datetime
-      e.g. Sun Sep 16 01:03:52 1973
- th   HTTP log format date/time                   datetime
-      e.g. 21/Nov/2011:00:07:11 +0000
- tt   Time                                        time
-      e.g. 10:21:36 PM -5:30
-===== =========================================== ============
-
-
-.. _string.format: https://docs.python.org/3/library/string.html#format-string-syntax
diff --git a/docs/parse_expressions.rst b/docs/parse_expressions.rst
new file mode 100644
index 0000000..36ca549
--- /dev/null
+++ b/docs/parse_expressions.rst
@@ -0,0 +1,87 @@
+.. _id.appendix.parse_expressions:
+
+==============================================================================
+Parse Expressions
+==============================================================================
+
+.. index:: parse expressions, regexp
+
+`Parse expressions`_ are a simplified form of regular expressions.
+The actual regular expression is hidden behind the **type** name / hint.
+
+`Parse expressions`_ are used in step definitions as a simplified alternative
+to regular expressions. They are used for parameters and type conversions
+(which are not supported for regular expression patterns).
+
+.. code-block:: python
+
+    # -- FILE: features/steps/example_steps.py
+    from behave import when
+
+    @when('we implement {number:d} tests')
+    def step_impl(context, number):  # -- NOTE: number is converted into integer
+        assert number > 1 or number == 0
+        context.tests_count = number
+
+The following tables provide a overview of the `parse expressions`_ syntax.
+See also `Python regular expressions`_ description in the Python `re module`_.
+
+===== =========================================== ========
+Type  Characters Matched                          Output
+===== =========================================== ========
+l     Letters (ASCII)                             str
+w     Letters, numbers and underscore             str
+W     Not letters, numbers and underscore         str
+s     Whitespace                                  str
+S     Non-whitespace                              str
+d     Digits (effectively integer numbers)        int
+D     Non-digit                                   str
+n     Numbers with thousands separators (, or .)  int
+%     Percentage (converted to value/100.0)       float
+f     Fixed-point numbers                         float
+F     Decimal numbers                             Decimal
+e     Floating-point numbers with exponent        float
+      e.g. 1.1e-10, NAN (all case insensitive)
+g     General number format (either d, f or e)    float
+b     Binary numbers                              int
+o     Octal numbers                               int
+x     Hexadecimal numbers (lower and upper case)  int
+ti    ISO 8601 format date/time                   datetime
+      e.g. 1972-01-20T10:21:36Z ("T" and "Z"
+      optional)
+te    RFC2822 e-mail format date/time             datetime
+      e.g. Mon, 20 Jan 1972 10:21:36 +1000
+tg    Global (day/month) format date/time         datetime
+      e.g. 20/1/1972 10:21:36 AM +1:00
+ta    US (month/day) format date/time             datetime
+      e.g. 1/20/1972 10:21:36 PM +10:30
+tc    ctime() format date/time                    datetime
+      e.g. Sun Sep 16 01:03:52 1973
+th    HTTP log format date/time                   datetime
+      e.g. 21/Nov/2011:00:07:11 +0000
+ts    Linux system log format date/time           datetime
+      e.g. Nov  9 03:37:44
+tt    Time                                        time
+      e.g. 10:21:36 PM -5:30
+===== =========================================== ========
+
+
+=====================  ==============================================================
+Cardinality            Description
+=====================  ==============================================================
+``?``                   Pattern with cardinality 0..1: optional part (question mark).
+``*``                   Pattern with cardinality zero or more, 0.. (asterisk).
+``+``                   Pattern with cardinality one or more, 1.. (plus sign).
+``{m}``                 Matches ``m`` repetitions of a pattern.
+``{m,n}``               Matches from ``m`` to ``n`` repetitions of a pattern.
+``[A-Za-z]+``           EXAMPLE: Matches one or more alphabetical characters.
+=====================  ==============================================================
+
+
+.. _parse module: https://github.com/r1chardj0n3s/parse
+.. _string.format: https://docs.python.org/3/library/string.html#format-string-syntax
+
+.. _re module: https://docs.python.org/3/library/re.html#module-re
+.. _Python regular expressions: https://docs.python.org/3/library/re.html#module-re
+.. _`regular expressions`: https://en.wikipedia.org/wiki/Regular_expression
+
